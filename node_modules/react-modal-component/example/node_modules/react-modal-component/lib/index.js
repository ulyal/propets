var React = require('react');
var TimeoutTransitionGroup = require('./TimeoutTransitionGroup');

var PropTypes = React.PropTypes;
var ReactTransitionGroup = React.addons.TransitionGroup;

var Modal = React.createClass({
    displayName: 'Modal',

    propTypes: {
        appendTo: PropTypes.object,
        overlay: PropTypes.string,
        className: PropTypes.string,
        transitionName: PropTypes.string,
        transitionEnter: PropTypes.bool,
        transitionLeave: PropTypes.bool,
        transitionAppear: PropTypes.bool,
        enterTimeout: PropTypes.number,
        leaveTimeout: PropTypes.number
    },

    getDefaultProps: function() {
        return {
          appendTo: document.body,
          overlay: 'overlay',
          className: 'modal-dialog',
          transitionAppear: true,
          transitionEnter: true,
          transitionLeave: true
        };
    },

    render: function() {
        return null;
    },

    componentDidMount: function() {
        this.node = document.createElement('div');
        this.node.className = this.props.overlay;
        this.props.appendTo.appendChild(this.node);
        React.render(React.createElement(_Modal, React.__spread({},  this.props)), this.node);
    },

    onTransitionEnd: function() {
        React.unmountComponentAtNode(this.node);
        document.body.removeChild(this.node);
        this.node = null;
    },

    componentWillUnmount: function() {
        React.render(React.createElement(_Modal, React.__spread({},  this.props, {children: null, onTransitionEnd: this.onTransitionEnd})),
                        this.node);
    }
});


var _Modal = React.createClass({displayName: "_Modal",

    render: function() {
        var $__0=      this.props,appendTo=$__0.appendTo,overlay=$__0.overlay,className=$__0.className,children=$__0.children,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{appendTo:1,overlay:1,className:1,children:1}),
            key = 'modal-'+ Math.random();

        if (children) {
            node = (React.createElement("div", {key: key, className: className}, 
              children
            ))
        } else {
            node = React.createElement("span", {key: key, style: {display:'inline-block'}})
        }

        return React.createElement(TimeoutTransitionGroup, React.__spread({},  other), 
            node
        )
    }
});


module.exports = Modal;
